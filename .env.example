# You must first activate a Billing Account here: https://platform.openai.com/account/billing/overview
# Then get your OpenAI API Key here: https://platform.openai.com/account/api-keys
OPENAI_API_KEY=XXXXXXXX

# OpenAI Model Configuration
# If you want to specify a particular OpenAI model, please set the OPENAI_MODEL variable to the model's name or ID.
# By default, the script will use the GPT-3.5 Turbo model.
# OPENAI_MODEL=XXXXXXXX


# You must first activate a Billing Account for each respective service:
# Anthropic: https://docs.anthropic.com/claude/reference/getting-started-with-the-api
# Google Gemini: https://ai.google.dev/tutorials/web_quickstart
# Mistral: https://docs.mistral.ai/api/
# Perplexity: https://docs.perplexity.ai/docs/getting-started
# OpenRouter: https://openrouter.ai/docs
# Then get your API Keys from the account settings or API section of each service:
# ANTHROPIC_API_KEY=XXXXXXXX
# GOOGLE_GEMINI_API_KEY=XXXXXXXX
# MISTRAL_API_KEY=XXXXXXXX
# PERPLEXITY_API_KEY=XXXXXXXX
# OPENROUTER_API_KEY=XXXXXXXX

# System Message
# If you want to specify a custom system message for your AI chatbot, you can set the SYSTEM_MESSAGE variable to the desired message content.
# This message will be displayed as the system's initial introduction.
# If not specified, a default system message will be used.
# SYSTEM_MESSAGE=XXXXXXXX

# When deploying to production, set the AUTH_URL environment variable to the canonical URL of your site
# AUTH_URL=XXXXXXXX

# Support OAuth login on preview deployments, see: https://authjs.dev/guides/basics/deployment#securing-a-preview-deployment
# Set the following only when deployed. In this example, we can reuse the same OAuth app, but if you are storing users, we recommend using a different OAuth app for development/production so that you don't mix your test and production user base.
# AUTH_REDIRECT_PROXY_URL=https://YOURAPP.vercel.app/api/auth

# Each pattern is matched against the end of the user's email address.
# For example, specifying "@gmail.com,@company.com" would allow access to emails ending with either "@gmail.com" or "@company.com".
# AUTH_EMAIL_PATTERNS=XXXXXXXX

# A comma-separated list of authorised email addresses used to restrict access to specific users.
# Each email in this list represents a specific user that is allowed to access the application.
# For example, specifying "example@gmail.com,example2@gmail.com" would allow only users with these exact email addresses to sign in.
# AUTH_AUTHORISED_EMAILS=XXXXXXXX

# Generate a random secret: https://generate-secret.vercel.app/32 or `openssl rand -base64 32`
AUTH_SECRET=XXXXXXXX

# Create a GitHub OAuth app here: https://github.com/settings/applications/new
# Authorization callback URL: https://authjs.dev/reference/core/providers_github#callback-url
# Enable or disable GitHub login. Set to "true" to enable, "false" to disable.
AUTH_GITHUB_ENABLED=true
AUTH_GITHUB_ID=XXXXXXXX
AUTH_GITHUB_SECRET=XXXXXXXX

# Create a Google OAuth app here: https://console.developers.google.com/
# Authorization callback URL: https://authjs.dev/reference/core/providers_google#callback-url
# Enable or disable Google login. Set to "true" to enable, "false" to disable.
AUTH_GOOGLE_ENABLED=true
AUTH_GOOGLE_ID=XXXXXXXX
AUTH_GOOGLE_SECRET=XXXXXXXX

# Set the MONGODB_URI to your MongoDB Atlas connection string.
# Instructions to set up MongoDB connection here: https://www.mongodb.com/docs/guides/atlas/connection-string/
MONGODB_URI=XXXXXXXX

# MongoDB database name
# If MONGODB_DB is left undefined, the script will use the database name from the connection string.
# MONGODB_DB=XXXXXXXX